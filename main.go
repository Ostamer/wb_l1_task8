package main

import (
	"fmt"
)

// Устанавливает i-й бит в 1
func setBitToOne(n int64, i int) int64 {
	return n | (1 << i) // Используем побитовое ИЛИ для установки бита в 1
}

// Устанавливает i-й бит в 0
func setBitToZero(n int64, i int) int64 {
	return n &^ (1 << i) // Используем побитовое И для сброса бита в 0
}

func main() {
	var n int64
	var i int
	var value_i int

	// Ввод числа
	fmt.Print("Введите число: ")
	fmt.Scan(&n)

	// Вывод числа в двоичной системе
	fmt.Printf("Число в двоичной системе: %b\n", n)

	// Ввод индекса бита для изменения
	fmt.Print("Введите индекс бита (считая справа начиная с нуля): ")
	fmt.Scan(&i)

	// Ввод значения бита для изменения
	fmt.Print("Введите значение для бита (1 или 0): ")
	fmt.Scan(&value_i)

	// Условие для установки бита
	if value_i == 1 {
		n = setBitToOne(n, i) // Устанавливаем i-й бит в 1
	} else if value_i == 0 {
		n = setBitToZero(n, i) // Устанавливаем i-й бит в 0
	} else {
		fmt.Println("Ошибка: значение должно быть 0 или 1") // Вывод сообщения о неправильно введеном числе
		return
	}

	// Вывод результата
	fmt.Printf("Результат после изменения: %d\n", n)
	// Вывод результата в двоичной системе
	fmt.Printf("Результат в двоичной системе: %b\n", n)
}
